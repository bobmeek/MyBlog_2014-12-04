<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.myblog.model.UserVO">

	<resultMap type="user" id="userResultMap" >
		<id property="id" column="u_id" />
		<result property="username" column="username" />
		<result property="userpwd" column="userpwd" />
		<result property="salt" column="salt" />
		<result property="email" column="email" />
		<result property="registerTime" column="register_time"/>
		<result property="registerIP" column="register_IP"/>
		<result property="lastLoginTime" column="last_login_time"/>
		<result property="lastLoginIP" column="last_login_IP"/>
		<result property="isDisabled" column="is_disabled"/>
		<result property="isEmailActive" column="is_email_active"/>
		<result property="uid" column="uid"/>
		<collection property="listRole" ofType="role" javaType="ArrayList" resultMap="org.myblog.model.RoleVO.roleResultMap"></collection>
	</resultMap>


	<!-- 添加用户信息操作 -->
	<insert id="add" parameterType="user" useGeneratedKeys="true" keyProperty="id">
		insert into user(username,userpwd,salt,email,register_time,register_IP,last_login_time,last_login_IP,is_disabled,is_email_active,uid) values(#{username},#{userpwd},#{salt},#{email},#{registerTime},#{registerIP},#{lastLoginTime},#{lastLoginIP},#{isDisabled},#{isEmailActive},#{uid})
	</insert>

	<!-- 用户的修改操作 -->
	<update id="update" parameterType="user">
		update user set username=#{username},salt=#{salt},userpwd=#{userpwd},email=#{email},register_time=#{registerTime},register_ip=#{registerIP},last_login_time=#{lastLoginTime},last_login_IP=#{lastLoginIP},is_disabled=#{isDisabled},is_email_active=#{isEmailActive},uid=#{uid} where
		email=#{email}
	</update>
	
	<delete id="delete" parameterType="int">
		delete u,ur FROM `user` u,user_role ur WHERE u.id=ur.user_id AND u.id=#{id}
	</delete>
	
	
	<!-- 查询全部操作 -->
	<select id="findAll" resultMap="userResultMap">  <!-- 调用的是resultMap的影射关系，否则类中的字段必须与数据库中的字段相同 -->
		select * from user
	</select>
	
	
	<!-- 根据邮箱获得对象 -->
	<select id="findByMail" resultType="user" parameterType="map">
		select * from user where email = #{email}
	</select>
	
	<!-- 根据邮箱获得对象 -->
	<select id="findByUsername" resultType="user" parameterType="map">
		select * from user where username = #{username}
	</select>
	
	<!-- 用户名是否存在 -->
	<select id="nameIsExist" resultType="int" parameterType="map">
		select count(*) from user where username=#{username}
	</select>

	<!-- 邮箱是否存在 -->
	<select id="emailIsExist" resultType="int" parameterType="map">
		select count(*) from user where email=#{email}
	</select>

	<!-- 根据用户名登录-->
	<select id="nameLogin" resultType="int" parameterType="map">
		select count(*) from user where username=#{username} and userpwd=#{userpwd}
	</select>

	<!-- 根据邮箱登录-->
	<select id="emailLogin" resultType="int" parameterType="map">
		select count(*) from user where email=#{email} and userpwd=#{userpwd}
	</select>

	
	<select id="findByPage" resultMap="userResultMap" parameterType="map">
		 <!-- SELECT u.id u_id,r.id r_id,u.username,u.email,u.register_time,u.register_IP,u.last_login_time,u.last_login_IP,u.is_disabled,u.is_email_active,u.uid,r.role,r.desc FROM `user` u ,role r,user_role ur WHERE u.`id`=ur.`user_id` AND r.`id`=ur.`role_id` limit #{pageNo}, #{pageSize} -->
		 
		SELECT u.id u_id,r.id r_id, u.username,u.email,u.register_time,u.register_IP,u.last_login_time,u.last_login_IP,u.is_disabled,u.is_email_active,u.uid,group_concat(r.`role`) as `role`,group_concat(r.`desc`) as `desc` FROM `user` u LEFT JOIN `user_role` ur ON u.`id`=ur.`user_id` LEFT JOIN `role` r ON r.`id`=ur.`role_id` group by ur.`user_id` limit #{pageNo}, #{pageSize}
		   
	</select>
	
	
	<!-- 用户分页查询所需要用到的总数 -->
	<select id="findTotal" resultType="int" parameterType="int">
		select count(*) from user
	</select>	
	
	<insert id="addRoleRelation">
		insert into user_role (user_id,role_id) values (#{userId},#{roleId})
	</insert>
	
	<delete id="deleteRoleRelation">
		delete from user_role where user_id=#{userId} and role_id=#{roleId}
	</delete>
	
	
</mapper>
